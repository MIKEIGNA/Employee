# # Use the latest 2.1 version of CircleCI pipeline process engine.
# # See: https://circleci.com/docs/configuration-reference

# # For a detailed guide to building and testing with Node, read the docs:
# # https://circleci.com/docs/language-javascript/ for more details
# version: 2.1

# # Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# # See: https://circleci.com/docs/orb-intro/
# orbs:
#   # See the Node orb documentation here: https://circleci.com/developer/orbs/orb/circleci/node
#   node: circleci/node@5.2

# jobs:
#   # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
#   build-and-test:
#     # Specify the execution environment. You can specify an image from Docker Hub or use one of our convenience images from CircleCI's Developer Hub.
#     # See: https://circleci.com/docs/executor-intro/ & https://circleci.com/docs/configuration-reference/#executor-job
#     docker:
#       # Specify the version you desire here
#       # See: https://circleci.com/developer/images/image/cimg/node
#       - image: cimg/node:16.10

#     # Add steps to the job
#     # See: https://circleci.com/docs/jobs-steps/#steps-overview & https://circleci.com/docs/configuration-reference/#steps
#     steps:
#       # Checkout the code as the first step.
#       - checkout
  
#       # The node orb's install-packages step will install the dependencies from a package.json.
#       # The orb install-packages step will also automatically cache them for faster future runs.
#       - node/install-packages:
#           # If you are using yarn, change the line below from "npm" to "yarn"
#           pkg-manager: npm
#       - run:
#           name: Run tests
#           command: npm test

# # Orchestrate jobs using workflows
# # See: https://circleci.com/docs/workflows/ & https://circleci.com/docs/configuration-reference/#workflows
# workflows:
#   sample: # This is the name of the workflow, feel free to change it to better match your workflow.
#     # Inside the workflow, you define the jobs you want to run.
#     jobs:
#       - build-and-test
#       # For running simple node tests, you could optionally use the node/test job from the orb to replicate and replace the job above in fewer lines.
#       # - node/test






# version: 2.1

# orbs:
#   node: circleci/node@5.2

# jobs:
#   build-and-test:
#     docker:
#       - image: cimg/node:16.10

#     steps:
#       - checkout

#       # Cache node_modules
#       - restore_cache:
#           keys:
#             - node-modules-{{ checksum "package.json" }}
#       - node/install-packages:
#           pkg-manager: npm
#       - save_cache:
#           paths:
#             - ./node_modules
#           key: node-modules-{{ checksum "package.json" }}

#       - run:
#           name: Run tests
#           command: npm test

#   # Optional: Add a deployment job
#   deploy:
#     docker:
#       - image: cimg/node:16.10

#     steps:
#       - checkout
#       - run:
#           name: Deploy to Production
#           command: |
#             # Add your deployment commands here
#             echo "Deploying application..."

# workflows:
#   version: 2
#   build:
#     jobs:
#       - build-and-test
#       # Uncomment the line below to add deployment to the workflow
#       # - deploy:
#       #     requires:
#       #       - build-and-test






version: 2.1

orbs:
  node: circleci/node@5.2

jobs:
  build-and-test:
    docker:
      - image: cimg/node:16.10

    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm

      # Run npm audit for security vulnerabilities
      - run:
          name: Security Audit
          command: npm audit --audit-level=high

      # Run tests and generate reports
      - run:
          name: Run tests
          command: |
            mkdir -p test-results
            npm test -- --coverage --outputFile=test-results/coverage.json

      # Save test results
      - store_test_results:
          path: test-results
          
      # Install and run SonarQube scanner
      - run:
          name: SonarQube Analysis
          command: |
            npm install -g sonar-scanner
            sonar-scanner \
              -Dsonar.projectKey=employee \
              -Dsonar.sources=. \
              -Dsonar.host.url=http://127.0.0.1:9000 \
              -Dsonar.token=sqp_72e4c9472800885b1dd8f333d60c4464b98dcd05


  build:
    docker:
      - image: cimg/node:16.10

    steps:
      - checkout
      - node/install-packages:
          pkg-manager: npm

      # Run the production build
      - run:
          name: Build Application
          command: npm run build

workflows:
  build_and_test:
    jobs:
      - build-and-test
      - build
